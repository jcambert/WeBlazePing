@inherits LayoutComponentBase

@inject Navigation Navigation
@inject NavigationManager NavigationManager
<MudThemeProvider Theme="currentTheme" />
<MudDialogProvider />
<MudSnackbarProvider />
<PageTitle>WePing</PageTitle>

<MudLayout>
    <MudAppBar Color="Color.Primary" Fixed="true">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
        WePing
        <MudSpacer />
        @if (Navigation.CanNavigateBack)
        {
            <MudIconButton Icon="@Icons.Material.Filled.ArrowBack" Color="Color.Secondary" aria-label="Go back" OnClick="(e)=>Navigation.NavigateBack()"></MudIconButton>
        }
        <MudInput @bind-Value="@_searchText"
                  Label="Rechercher"
                  Variant="Variant.Filled"
                  Adornment="Adornment.End"
                  AdornmentIcon="@Icons.Filled.Search" OnAdornmentClick="Search" DebounceInterval="300" TextChanged="OnTextChanged"
                  Class="appbar-search" />
        <MudTooltip Text="Toggle light/dark theme">
            <MudIconButton Icon="@Icons.Material.Filled.Brightness4" Color="Color.Inherit" OnClick="@((e) => DarkMode())" />
        </MudTooltip>
    </MudAppBar>
    <MudDrawer @bind-Open="@_drawerOpen">
        <NavMenu />

    </MudDrawer>
    <MudMainContent>
        @Body
    </MudMainContent>
</MudLayout>

@code {
    bool _drawerOpen = false;
    string _searchText;
    protected override void OnInitialized()
    {
        currentTheme = darkTheme;
    }

    void DarkMode()
    {
        if (currentTheme == defaultTheme)
        {
            currentTheme = darkTheme;
        }
        else
        {
            currentTheme = defaultTheme;
        }
        
    }

    MudTheme currentTheme = new MudTheme();
    MudTheme defaultTheme = new MudTheme()
        {
            Palette = new Palette()
            {
                Black = "#272c34",
                TextPrimary = "rgba(0,0,0, 0.70)",
                AppbarText = "rgba(0,0,0, 0.70)",
            }
        };

    MudTheme darkTheme = new MudTheme()
        {
            Palette = new Palette()
            {
                Black = "#27272f",
                Background = "#32333d",
                BackgroundGrey = "#27272f",
                Surface = "#373740",
                DrawerBackground = "#27272f",
                DrawerText = "rgba(255,255,255, 0.50)",
                DrawerIcon = "rgba(255,255,255, 0.50)",
                AppbarBackground = "#27272f",
                AppbarText = "rgba(255,255,255, 0.70)",
                TextPrimary = "rgba(255,255,255, 0.70)",
                TextSecondary = "rgba(255,255,255, 0.50)",
                ActionDefault = "#adadb1",
                ActionDisabled = "rgba(255,255,255, 0.26)",
                ActionDisabledBackground = "rgba(255,255,255, 0.12)",
                Divider = "rgba(255,255,255, 0.12)",
                DividerLight = "rgba(255,255,255, 0.06)",
                TableLines = "rgba(255,255,255, 0.12)",
                LinesDefault = "rgba(255,255,255, 0.12)",
                LinesInputs = "rgba(255,255,255, 0.3)",
                TextDisabled = "rgba(255,255,255, 0.2)"
            }
        };
    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    void Search(EventArgs e)
    {
        NavigationManager.NavigateTo($"/search?filter={_searchText}");
    }

    void OnTextChanged(string search)
    {
        NavigationManager.NavigateTo($"/search?filter={search}");
    }
}
